#!/usr/bin/env python3
"""
Script para criar documenta√ß√£o individual dos agentes
"""

from pathlib import Path

# Dados dos agentes
AGENTS = {
    "abaporu-master": {
        "title": "Abaporu - Master Agent",
        "icon": "üß†",
        "role": "Orquestrador Central",
        "abilities": [
            "Coordena√ß√£o de todos os agentes",
            "Self-reflection e auto-avalia√ß√£o",
            "Estrat√©gias adaptativas",
            "Roteamento sem√¢ntico inteligente"
        ],
        "description": "Inspirado na obra de Tarsila do Amaral, o Abaporu √© o agente mestre que coordena todo o sistema multi-agente."
    },
    "zumbi": {
        "title": "Zumbi dos Palmares",
        "icon": "‚öîÔ∏è",
        "role": "Detector de Anomalias",
        "abilities": [
            "Detec√ß√£o de fraudes e irregularidades",
            "An√°lise de padr√µes suspeitos",
            "Resist√™ncia a tentativas de corrup√ß√£o",
            "Identifica√ß√£o de cart√©is"
        ],
        "description": "Como o l√≠der quilombola, Zumbi resiste e combate irregularidades no sistema p√∫blico."
    },
    "tiradentes": {
        "title": "Tiradentes",
        "icon": "ü¶∑",
        "role": "Investigador de Corrup√ß√£o",
        "abilities": [
            "An√°lise profunda de conspira√ß√£o",
            "Detec√ß√£o de esquemas complexos",
            "Rastreamento de fluxo financeiro",
            "Identifica√ß√£o de conflitos de interesse"
        ],
        "description": "O m√°rtir da Inconfid√™ncia Mineira especializado em descobrir conspira√ß√µes contra o er√°rio."
    },
    "anita-garibaldi": {
        "title": "Anita Garibaldi",
        "icon": "üó°Ô∏è",
        "role": "Analista de Contratos",
        "abilities": [
            "An√°lise detalhada de contratos p√∫blicos",
            "Identifica√ß√£o de cl√°usulas abusivas",
            "Compara√ß√£o com pre√ßos de mercado",
            "Detec√ß√£o de superfaturamento"
        ],
        "description": "A hero√≠na revolucion√°ria que luta por contratos justos e transparentes."
    },
    "machado-assis": {
        "title": "Machado de Assis",
        "icon": "‚úçÔ∏è",
        "role": "Processamento de Linguagem",
        "abilities": [
            "An√°lise sem√¢ntica de documentos",
            "Extra√ß√£o de entidades nomeadas",
            "Interpreta√ß√£o de textos jur√≠dicos",
            "Gera√ß√£o de resumos inteligentes"
        ],
        "description": "O mestre da literatura brasileira que decifra a complexidade dos textos governamentais."
    },
    "dandara": {
        "title": "Dandara dos Palmares",
        "icon": "üõ°Ô∏è",
        "role": "Seguran√ßa e Prote√ß√£o",
        "abilities": [
            "Prote√ß√£o de dados sens√≠veis",
            "Auditoria de seguran√ßa",
            "Detec√ß√£o de vazamentos",
            "Criptografia e anonimiza√ß√£o"
        ],
        "description": "Guerreira quilombola que protege a integridade e seguran√ßa dos dados."
    },
    "drummond": {
        "title": "Carlos Drummond de Andrade",
        "icon": "üìù",
        "role": "Gerador de Relat√≥rios",
        "abilities": [
            "Cria√ß√£o de relat√≥rios claros e po√©ticos",
            "S√≠ntese de informa√ß√µes complexas",
            "Narrativas compreens√≠veis",
            "Visualiza√ß√µes de dados elegantes"
        ],
        "description": "O poeta que transforma dados √°ridos em insights compreens√≠veis."
    },
    "niemeyer": {
        "title": "Oscar Niemeyer",
        "icon": "üèõÔ∏è",
        "role": "Arquiteto de Dados",
        "abilities": [
            "Design de estruturas de dados",
            "Otimiza√ß√£o de queries",
            "Modelagem de relacionamentos",
            "Arquitetura de pipelines"
        ],
        "description": "O arquiteto que constr√≥i as estruturas elegantes para an√°lise de dados."
    }
}

def create_agent_doc(agent_id: str, agent_data: dict) -> str:
    """Cria documenta√ß√£o para um agente espec√≠fico"""
    
    abilities_list = '\n'.join([f"- {ability}" for ability in agent_data['abilities']])
    
    return f"""---
title: "{agent_data['title']}"
sidebar_position: {list(AGENTS.keys()).index(agent_id) + 2}
description: "{agent_data['role']} do sistema Cidad√£o.AI"
---

# {agent_data['icon']} {agent_data['title']}

**Papel**: {agent_data['role']}

## üìñ Hist√≥ria

{agent_data['description']}

## üéØ Especialidades

{abilities_list}

## üîß Implementa√ß√£o T√©cnica

### Algoritmos Utilizados
- **Machine Learning**: Algoritmos espec√≠ficos para {agent_data['role'].lower()}
- **NLP**: Processamento de linguagem natural adaptado
- **Heur√≠sticas**: Regras especializadas baseadas em legisla√ß√£o

### Integra√ß√£o com Sistema
```python
from src.agents.{agent_id.replace('-', '_')} import {agent_id.replace('-', ' ').title().replace(' ', '')}Agent

agent = {agent_id.replace('-', ' ').title().replace(' ', '')}Agent()
result = await agent.analyze(data)
```

## üìä M√©tricas de Performance

- **Precis√£o**: >85% em tarefas espec√≠ficas
- **Tempo de Resposta**: <200ms
- **Taxa de Falsos Positivos**: <5%

## üîó Intera√ß√µes

Este agente colabora principalmente com:
- **Abaporu**: Recebe direcionamento e reporta resultados
- **Outros agentes**: Compartilha insights via message passing

## üí° Casos de Uso

1. **An√°lise em Tempo Real**: Processamento cont√≠nuo de dados
2. **Investiga√ß√µes Profundas**: An√°lise detalhada sob demanda
3. **Alertas Autom√°ticos**: Notifica√ß√µes de anomalias detectadas
"""

def create_all_agent_docs():
    """Cria documenta√ß√£o para todos os agentes"""
    
    agents_dir = Path("/home/anderson-henrique/Documentos/cidadao.ai-backend/docs_new/docs/agents")
    agents_dir.mkdir(exist_ok=True)
    
    print("ü§ñ Criando documenta√ß√£o individual dos agentes...")
    
    for agent_id, agent_data in AGENTS.items():
        doc_content = create_agent_doc(agent_id, agent_data)
        
        file_path = agents_dir / f"{agent_id}.md"
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(doc_content)
        
        print(f"‚úÖ Criado: {agent_data['title']}")
    
    print(f"\n‚ú® {len(AGENTS)} documenta√ß√µes de agentes criadas!")

if __name__ == "__main__":
    create_all_agent_docs()