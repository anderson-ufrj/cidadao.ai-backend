"""
Simple chat endpoint for Maritaca AI integration
Focused on making the chat work with minimal dependencies
"""

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel, Field
from typing import Optional, Dict, Any, List
import os
from src.core import json_utils
import uuid
from datetime import datetime

from src.core import get_logger
from src.services.maritaca_client import MaritacaClient, MaritacaModel

logger = get_logger(__name__)
router = APIRouter(tags=["chat-simple"])

# Initialize Maritaca client
maritaca_client = None
MARITACA_API_KEY = os.environ.get("MARITACA_API_KEY")

if MARITACA_API_KEY:
    try:
        maritaca_client = MaritacaClient(
            api_key=MARITACA_API_KEY,
            model=MaritacaModel.SABIA_3
        )
        logger.info("Maritaca AI client initialized successfully")
    except Exception as e:
        logger.error(f"Failed to initialize Maritaca AI: {e}")
else:
    logger.warning("MARITACA_API_KEY not found - chat will use fallback responses")

class SimpleChatRequest(BaseModel):
    """Simple chat request"""
    message: str = Field(..., min_length=1, max_length=1000)
    session_id: Optional[str] = None

class SimpleChatResponse(BaseModel):
    """Simple chat response"""
    message: str
    session_id: str
    timestamp: str
    model_used: str = "fallback"

# System prompt for Cidad√£o.AI
SYSTEM_PROMPT = """Voc√™ √© o assistente virtual do Cidad√£o.AI, uma plataforma de transpar√™ncia p√∫blica brasileira.

Sua miss√£o √© ajudar cidad√£os a entender gastos governamentais, contratos p√∫blicos e dados de transpar√™ncia.

Caracter√≠sticas:
- Seja claro, objetivo e educativo
- Use linguagem acess√≠vel ao cidad√£o comum
- Quando perguntado sobre investiga√ß√µes, sugira exemplos como "investigar contratos de sa√∫de" ou "analisar gastos com educa√ß√£o"
- Mantenha um tom profissional mas amig√°vel
- Foque em transpar√™ncia e accountability governamental

Voc√™ N√ÉO deve:
- Fazer an√°lises pol√≠ticas partid√°rias
- Expressar opini√µes pessoais
- Fazer acusa√ß√µes sem base em dados"""

@router.post("/simple", response_model=SimpleChatResponse)
async def simple_chat(request: SimpleChatRequest) -> SimpleChatResponse:
    """
    Simple chat endpoint with Maritaca AI integration
    """
    session_id = request.session_id or str(uuid.uuid4())
    
    try:
        # Check if Maritaca is available
        if maritaca_client:
            logger.info(f"Processing message with Maritaca AI: {request.message[:50]}...")
            
            # Prepare messages for Maritaca
            messages = [
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": request.message}
            ]
            
            # Get response from Maritaca
            try:
                response = await maritaca_client.chat_completion(
                    messages=messages,
                    temperature=0.7,
                    max_tokens=500
                )
                
                logger.info("Maritaca AI response received successfully")
                
                return SimpleChatResponse(
                    message=response.content,
                    session_id=session_id,
                    timestamp=datetime.utcnow().isoformat(),
                    model_used=response.model
                )
                
            except Exception as e:
                logger.error(f"Maritaca AI error: {e}")
                # Fall through to fallback responses
        
        # Fallback responses when Maritaca is not available
        logger.info("Using fallback responses")
        
        message_lower = request.message.lower()
        
        # Simple intent detection
        if any(greeting in message_lower for greeting in ["ol√°", "oi", "bom dia", "boa tarde", "boa noite"]):
            response = "Ol√°! Sou o assistente do Cidad√£o.AI. Posso ajud√°-lo a investigar gastos p√∫blicos, contratos governamentais e dados de transpar√™ncia. Como posso ajudar?"
        elif "investigar" in message_lower or "analisar" in message_lower:
            response = "Para investigar dados p√∫blicos, voc√™ pode tentar:\n\n‚Ä¢ 'Investigar contratos de sa√∫de em S√£o Paulo'\n‚Ä¢ 'Analisar gastos com educa√ß√£o em 2024'\n‚Ä¢ 'Verificar sal√°rios de servidores do Minist√©rio da Sa√∫de'\n\nQual √°rea voc√™ gostaria de explorar?"
        elif "ajuda" in message_lower or "help" in message_lower:
            response = "O Cidad√£o.AI oferece:\n\nüìä **An√°lise de Contratos**: Investigue licita√ß√µes e contratos p√∫blicos\nüí∞ **Gastos P√∫blicos**: Acompanhe despesas governamentais\nüë• **Servidores**: Consulte sal√°rios e cargos p√∫blicos\nüîç **Detec√ß√£o de Anomalias**: Identifique padr√µes irregulares\n\nDigite o que deseja investigar!"
        elif "transpar√™ncia" in message_lower or "portal" in message_lower:
            response = "O Portal da Transpar√™ncia √© a principal fonte de dados do governo federal brasileiro. Atrav√©s do Cidad√£o.AI, voc√™ pode acessar esses dados de forma mais inteligente, com an√°lises autom√°ticas e detec√ß√£o de anomalias. Que tipo de dado gostaria de explorar?"
        else:
            response = "Entendi sua pergunta. Para melhor ajud√°-lo, voc√™ pode:\n\n1. Pedir para investigar contratos ou gastos espec√≠ficos\n2. Solicitar an√°lises de √≥rg√£os p√∫blicos\n3. Buscar informa√ß√µes sobre servidores\n\nPor exemplo: 'Quero investigar contratos do Minist√©rio da Sa√∫de'"
        
        return SimpleChatResponse(
            message=response,
            session_id=session_id,
            timestamp=datetime.utcnow().isoformat(),
            model_used="fallback"
        )
        
    except Exception as e:
        logger.error(f"Chat error: {e}")
        raise HTTPException(
            status_code=500,
            detail="Erro ao processar mensagem. Por favor, tente novamente."
        )

@router.get("/simple/status")
async def chat_status():
    """Check chat service status"""
    return {
        "maritaca_available": maritaca_client is not None,
        "api_key_configured": MARITACA_API_KEY is not None,
        "timestamp": datetime.utcnow().isoformat()
    }