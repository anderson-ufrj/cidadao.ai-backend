#!/usr/bin/env python3
"""
Script para limpar e restaurar documenta√ß√£o de forma gradual
Remove completamente CSS, JavaScript e HTML problem√°tico
"""

import os
import re
from pathlib import Path

def clean_mdx_content(content: str) -> str:
    """Limpa conte√∫do MDX removendo tudo que pode quebrar"""
    
    # Remove frontmatter e extrai t√≠tulo
    frontmatter_match = re.match(r'^---\n(.*?)\n---\n(.*)$', content, re.DOTALL)
    if frontmatter_match:
        frontmatter_raw = frontmatter_match.group(1)
        body = frontmatter_match.group(2)
        
        # Extrai t√≠tulo do frontmatter
        title_match = re.search(r'title:\s*(.+)', frontmatter_raw)
        title = title_match.group(1).strip('"') if title_match else "Documenta√ß√£o"
    else:
        title = "Documenta√ß√£o"
        body = content
    
    # Remove COMPLETAMENTE todo CSS e JavaScript
    body = re.sub(r'<style[^>]*>.*?</style>', '', body, flags=re.DOTALL)
    body = re.sub(r'<script[^>]*>.*?</script>', '', body, flags=re.DOTALL)
    body = re.sub(r'\.[\w-]+\s*\{[^}]*\}', '', body, flags=re.DOTALL)
    body = re.sub(r'\[data-theme[^\]]*\][^{]*\{[^}]*\}', '', body, flags=re.DOTALL)
    
    # Remove divs complexas
    body = re.sub(r'<div[^>]*class="[^"]*"[^>]*>.*?</div>', '', body, flags=re.DOTALL)
    body = re.sub(r'<div[^>]*style="[^"]*"[^>]*>.*?</div>', '', body, flags=re.DOTALL)
    
    # Remove spans com style
    body = re.sub(r'<span[^>]*style="[^"]*"[^>]*>(.*?)</span>', r'\1', body, flags=re.DOTALL)
    
    # Remove coment√°rios HTML
    body = re.sub(r'<!--.*?-->', '', body, flags=re.DOTALL)
    
    # Remove tags vazias
    body = re.sub(r'<([^>]+)>\s*</\1>', '', body)
    body = re.sub(r'<[^>]*/?>', '', body)
    
    # Limpa espa√ßos excessivos
    body = re.sub(r'\n\s*\n\s*\n+', '\n\n', body)
    body = re.sub(r'^\s+', '', body, flags=re.MULTILINE)
    
    # Remove linhas que s√£o s√≥ espa√ßos/tabs
    body = '\n'.join(line for line in body.split('\n') if line.strip())
    
    # Se ficou muito vazio, cria conte√∫do b√°sico
    clean_lines = [line for line in body.split('\n') if line.strip()]
    if len(clean_lines) < 5:
        body = f"""# {title}

*Documenta√ß√£o em desenvolvimento...*

Esta se√ß√£o est√° sendo migrada da documenta√ß√£o anterior. 

## Conte√∫do

- Informa√ß√µes t√©cnicas detalhadas
- Exemplos pr√°ticos
- Diagramas explicativos

## Status

üöß **Em constru√ß√£o** - Conte√∫do ser√° expandido em breve.
"""
    
    # Cria novo arquivo limpo
    clean_content = f"""---
title: "{title}"
sidebar_position: 1
description: "Documenta√ß√£o t√©cnica do Cidad√£o.AI"
---

{body.strip()}
"""
    
    return clean_content

def process_directory(source_dir: Path, target_dir: Path, section_name: str):
    """Processa um diret√≥rio inteiro"""
    
    target_dir.mkdir(parents=True, exist_ok=True)
    processed = 0
    
    for file in source_dir.glob("*.md"):
        try:
            with open(file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            clean_content = clean_mdx_content(content)
            
            target_file = target_dir / file.name
            with open(target_file, 'w', encoding='utf-8') as f:
                f.write(clean_content)
            
            print(f"‚úÖ Processado: {section_name}/{file.name}")
            processed += 1
            
        except Exception as e:
            print(f"‚ùå Erro em {file}: {e}")
    
    return processed

def restore_documentation():
    """Restaura toda a documenta√ß√£o de forma limpa"""
    
    source_base = Path("/home/anderson-henrique/Documentos/cidadao.ai-backend/docs_new/docs_problematic")
    target_base = Path("/home/anderson-henrique/Documentos/cidadao.ai-backend/docs_new/docs")
    
    print("üöÄ Iniciando restaura√ß√£o limpa da documenta√ß√£o...")
    print("=" * 60)
    
    total_processed = 0
    
    # Se√ß√µes a processar
    sections = [
        ("architecture", "üèóÔ∏è Arquitetura"),
        ("agents", "ü§ñ Agentes"),
        ("math", "üßÆ Matem√°tica"),
        ("api", "üîå API"),
        ("infrastructure", "üíæ Infraestrutura"),
        ("development", "üß™ Desenvolvimento"),
    ]
    
    for dir_name, display_name in sections:
        source_dir = source_base / dir_name
        target_dir = target_base / dir_name
        
        if source_dir.exists():
            print(f"\nüìÇ Processando: {display_name}")
            count = process_directory(source_dir, target_dir, dir_name)
            total_processed += count
            print(f"   ‚Üí {count} arquivos processados")
        else:
            print(f"‚ö†Ô∏è  Diret√≥rio n√£o encontrado: {source_dir}")
    
    print("\n" + "=" * 60)
    print(f"‚ú® Restaura√ß√£o conclu√≠da: {total_processed} arquivos processados")
    print("üîß Pr√≥ximo passo: Testar servidor Docusaurus")

if __name__ == "__main__":
    restore_documentation()